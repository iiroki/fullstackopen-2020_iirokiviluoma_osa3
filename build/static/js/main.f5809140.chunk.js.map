{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","url","delete","Filter","props","value","filter","onChange","handleChange","PersonForm","onSubmit","add","name","handleNameChange","number","handleNumberChange","type","Person","handleDel","onClick","Persons","persons","delHandler","map","p","key","notificationTypes","Notification","msg","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notificationMsg","setNotificationMsg","notificationType","setNotificationType","useEffect","personService","all","showNotification","setTimeout","event","target","preventDefault","length","returnedPerson","concat","toLowerCase","indexOf","find","window","confirm","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5809140.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst appendNew = (newPerson) => {\n  const request = axios.post(baseUrl, newPerson)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const url = `${baseUrl}/${id}`\n  const request = axios.delete(url)\n  return request.then(response => response)\n}\n\nconst modifyPerson = (id, newPerson) => {\n  const url = `${baseUrl}/${id}`\n  const request = axios.put(url, newPerson)\n  return request.then(response => response.data)\n}\n\nexport default {getAll, appendNew, deletePerson, modifyPerson}","import React from 'react'\n\nconst Filter = (props) => {\n  return (\n    <form>\n      <div>\n        Search: <input value={props.filter} onChange={props.handleChange}/>\n      </div>\n    </form>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n    <div>\n      <h2>Add new number</h2>\n      <form onSubmit={props.add}>\n        <div>\n          Name: <input value={props.name} onChange={props.handleNameChange}/>\n        </div>\n        <div>\n          Number: <input value={props.number} onChange={props.handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">Add new number</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = ({name, number, handleDel}) => {\n  return (\n    <li>\n      {name}: {number}\n      <button onClick={handleDel}>Delete</button>\n    </li>\n  )\n}\n\n// persons = Kaikki tulostettavat henkilöt\n// delHandler = Henkilön poiston tapahtumankäsittelijä\nconst Persons = ({persons, delHandler}) => {\n  //debugger\n  return (\n    <div>\n      <h2>Numbers</h2>\n      <ul>\n        {persons.map(p =>\n          <Person key={p.name} name={p.name} number={p.number}\n            handleDel={() => delHandler(p.id)}/>)}\n      </ul>\n    </div>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst notificationTypes = {\n  GOOD: 0,\n  BAD: 1\n}\n\nconst Notification = ({msg, type}) => {\n  if (msg === null) {\n    return null\n  }\n\n  if (type === notificationTypes.GOOD) {\n    return (\n      <div className='notification_good'>\n        {msg}\n      </div>\n    )\n  }\n\n  if (type === notificationTypes.BAD) {\n    return (\n      <div className='notification_bad'>\n        {msg}\n      </div>\n    )\n  }\n}\n\nexport {Notification, notificationTypes}","import React, {useState, useEffect} from 'react'\nimport './index.css'\nimport personService from './services/persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport {Notification, notificationTypes} from './components/Notification'\n\n\nconst App = () => {\n  // Sovelluksen tilat\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notificationMsg, setNotificationMsg] = useState(null)\n  const [notificationType, setNotificationType] = useState(notificationTypes.GOOD)\n\n  const notificationTime = 2500\n\n  // Haetaan tiedot palvelimelta.\n  useEffect(() => {\n    // Haetaan kaikki palvelimen henkilöt.\n    personService\n      .getAll()\n      .then(all => {\n        setPersons(all)\n      })\n  }, [])  // Aktivoidaan 1. renderöinnin jälkeen.\n\n  // Nollataan lisäyskentät tarvittaessa.\n  const resetFields = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Ilmoitus ja sen pyyhkiminen ajan myötä.\n  const showNotification = (msg, type) => {\n    setNotificationType(type)  // Oikeanlainen ilmoitus\n\n    setNotificationMsg(msg)\n      setTimeout(() => {\n        setNotificationMsg(null)\n      }, notificationTime)\n  }\n\n  // Lisätään uusi numero osoitekirjaan.\n  const addPerson = (event) => {\n    // Ei uudelleenohjausta\n    event.preventDefault()\n\n    // Tyhjiä kenttiä ei sallita!\n    if (newName.length === 0 || newNumber.length === 0) {\n      return\n    }\n\n    // TODO: Olemassa olevan numeron muokkaus!\n    // ...\n\n    // Lisätään uusi henkilö palvelimelle\n    personService\n      .appendNew({name: newName, number: newNumber})\n      .then(returnedPerson => {\n        debugger\n        setPersons(persons.concat(returnedPerson))\n        resetFields()\n      })\n\n    showNotification(`Added: ${newName}`, notificationTypes.GOOD)\n  }\n\n  const deletePerson = (id) => {\n    const target = persons.find(p => p.id === id)\n\n    // Vahvistetaan poisto\n    if (!window.confirm(`Delete ${target.name}?`)) {\n      return\n    }\n\n    // Poistetaan kyseinen henkilö...\n    personService\n      .deletePerson(id)\n      .then(response => {\n        console.log(response)\n      })\n      .catch(error => {\n        showNotification(`Error: ${target.name} is already deleted from server.`,\n          notificationTypes.BAD)\n        return\n      })\n\n    //... ja asetetaan tila oikeaksi (poiston jälkeen)\n    setPersons(persons.filter(p => p.id !== id))\n    showNotification(`Deleted: ${target.name}`, notificationTypes.GOOD)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  // Valitaan, mitkä nimet näytetään osoitekirjassa hakukentän perusteella.\n  const personsToShow = () => {\n    if (filter === '') {\n      return persons\n    }\n    // Palautetaan ainoastaan hakukentän mukaiset.\n    return persons.filter(\n      p => p.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1\n    )\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification msg={notificationMsg} type={notificationType}/>\n\n      <Filter filter={filter} handleChange={handleFilterChange}/>\n\n      <PersonForm\n        add={addPerson}\n        name={newName} handleNameChange={handleNameChange}\n        number={newNumber} handleNumberChange={handleNumberChange}\n      />\n\n      <Persons persons={personsToShow()} delHandler={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}